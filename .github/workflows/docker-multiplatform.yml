# Dockerfile build and push workflow for multi-platform images

name: ci

on:
 push:
  branches:
    - "main"

env:
 ROOT_CONTAINER: "ubuntu:22.04"
 GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
 IMAGE_NAME: "cdmi"
 IMAGE_TAG: "latest"
 OHDSI_USER: "Odysseus"
 OHDSI_UID: "1000"
 OHDSI_GID: "100"

jobs:
 build:
  runs-on: ubuntu-latest
  strategy:
    fail-fast: false
    matrix:
      platform:
        - linux/amd64
        - linux/arm64
        - linux/arm/v6
        - linux/arm/v7
        - linux/arm/v8
  steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ github.repository_owner }}/${{ github.repository }}/images/${{ env.IMAGE_NAME }}
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to GitHub Container Registry (GHCR)
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GHCR_TOKEN }}
    - name: Convert repository name to lowercase
      run: |
        IMAGE_REF_LOWER=$(echo "ghcr.io/${{ github.repository_owner }}/${{ github.repository }}/images/${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')
        echo "IMAGE_REF_LOWER=${IMAGE_REF_LOWER}" >> $GITHUB_ENV
    - name: Build and push by digest
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./images/${{ env.IMAGE_NAME }} # Specify the path to your Dockerfile
        platforms: ${{ matrix.platform }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=registry,ref=${{ env.IMAGE_REF_LOWER }}:cache
        cache-to: type=inline,ignore-error=true
        outputs: type=image,name=${{ env.IMAGE_REF_LOWER }}:${{ env.IMAGE_TAG }},push-by-digest=true,name-canonical=true,push=true
        build-args: |
          ROOT_CONTAINER=${{ env.ROOT_CONTAINER }}
          OHDSI_USER=${{ env.OHDSI_USER }}
          OHDSI_UID=${{ env.OHDSI_UID }}
          OHDSI_GID=${{ env.OHDSI_GID }}
        provenance: false
    - name: Export digest
      run: |
        mkdir -p /tmp/digests
        digest="${{ steps.build.outputs.digest }}"
        touch "/tmp/digests/${digest#sha256:}"
    - name: Upload digest
      uses: actions/upload-artifact@v3
      with:
        name: digests
        path: /tmp/digests/*
        if-no-files-found: error
        retention-days: 1
    - name: Notify build failure
      if: failure()
      run: echo "Build failed. Please check the logs for details."
